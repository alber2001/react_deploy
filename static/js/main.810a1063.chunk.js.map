{"version":3,"sources":["repuestos.js","Nosotros.jsx","About.js","App.js","serviceWorker.js","index.js"],"names":["respuestos","Nosotros","React","useEffect","console","log","obtenerDatos","useState","equipo","setEquipo","a","fetch","data","json","users","map","item","key","id","name","email","About","Header","Layout","Content","Footer","Home","App","className","theme","mode","defaultSelectedKeys","Item","to","style","padding","margin","path","exact","component","repuestos","textAlign","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qMAceA,MATf,WACE,OACC,4C,iCCwCYC,EA1CE,WAQbC,IAAMC,WAAU,WACZC,QAAQC,IAAI,aAGZC,MACD,IAbgB,MAgBSJ,IAAMK,SAAS,IAhBxB,mBAgBZC,EAhBY,KAgBJC,EAhBI,KAmBbH,EAAY,uCAAG,8BAAAI,EAAA,sEACEC,MAAM,8CADR,cACXC,EADW,gBAEGA,EAAKC,OAFR,OAEXC,EAFW,OAGjBV,QAAQC,IAAIS,GACZL,EAAUK,GAJO,2CAAH,qDAQlB,OACI,6BACI,wCAEA,4BAEQN,EAAOO,KAAI,SAAAC,GAAI,OACX,wBAAIC,IAAKD,EAAKE,IAAd,IAAoBF,EAAKG,KAAzB,MAAkCH,EAAKI,MAAvC,WCxBTC,MAVf,WAEI,OACD,+C,yCCEKC,EAA4BC,IAA5BD,OAAQE,EAAoBD,IAApBC,QAASC,EAAWF,IAAXE,OA+CzB,IAAMC,EAAO,kBAAO,sCAOLC,EAnDf,WACE,OACE,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAQC,UAAU,UAChB,kBAACN,EAAD,KAEE,yBAAKM,UAAU,SACf,kBAAC,IAAD,CAAMC,MAAM,OAAOC,KAAK,aAAaC,oBAAqB,CAAC,MAEzD,yBAAKH,UAAU,OAEb,kBAAC,IAAD,CAAMC,MAAM,OAAOC,KAAK,aAAaC,oBAAqB,CAAC,MACzD,kBAAC,IAAKC,KAAN,CAAWf,IAAI,KAAf,IAAoB,kBAAC,IAAD,CAAMgB,GAAG,KAAT,QAApB,KACA,kBAAC,IAAKD,KAAN,CAAWf,IAAI,KAAf,IAAoB,kBAAC,IAAD,CAAMgB,GAAG,UAAT,iBAApB,KACA,kBAAC,IAAKD,KAAN,CAAWf,IAAI,KAAf,IAAoB,kBAAC,IAAD,CAAMgB,GAAG,cAAT,aAApB,KACA,kBAAC,IAAKD,KAAN,CAAWf,IAAI,KAAf,IAAoB,kBAAC,IAAD,CAAMgB,GAAG,aAAT,YAApB,SAQR,kBAACT,EAAD,CAASU,MAAO,CAAEC,QAAS,WACzB,kBAAC,IAAD,CAAYD,MAAO,CAAEE,OAAQ,YAG7B,yBAAKR,UAAU,uBAEX,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOS,KAAK,IAAIC,OAAK,EAACC,UAAWb,IACjC,kBAAC,IAAD,CAAOW,KAAK,SAASE,UAAWlB,IAChC,kBAAC,IAAD,CAAOgB,KAAK,aAAaE,UAAWC,IACpC,kBAAC,IAAD,CAAOH,KAAK,YAAYE,UAAWtC,OAK3C,kBAACwB,EAAD,CAAQS,MAAO,CAAEO,UAAW,WAA5B,6CCvCcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvD,QAAQuD,MAAMA,EAAMC,a","file":"static/js/main.810a1063.chunk.js","sourcesContent":["\r\nimport './App.css';\r\nimport React from \"react\";\r\nimport \"antd/dist/antd.css\";\r\n\r\nfunction respuestos() {\r\n  return (\r\n   <div>\r\n       respuestos\r\n   </div>\r\n\r\n  );\r\n}\r\n\r\nexport default respuestos;\r\n","\r\nimport './App.css';\r\nimport React from \"react\";\r\nimport \"antd/dist/antd.css\";\r\n\r\nconst Nosotros = () => {\r\n\r\n   // const datos = [\r\n     //   { id: 1, nombre: \"JAva\" },\r\n       // { id: 2, nombre: \"C++\" },\r\n       // { id: 3, nombre: \"Netbeans\" }\r\n    //]\r\n\r\n    React.useEffect(() => {\r\n        console.log('useEffect');\r\n        //document.title =\"UseEffect\";\r\n        //setEquipo(datos);\r\n        obtenerDatos();\r\n    }, [])\r\n\r\n    //esto es un estado\r\n    const [equipo, setEquipo] = React.useState([]);\r\n\r\n    //llamando a la api\r\n    const obtenerDatos = async () => {\r\n        const data = await fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n        const users = await data.json();\r\n        console.log(users);\r\n        setEquipo(users); \r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2>Nosotros</h2>\r\n                \r\n            <ul>\r\n                {\r\n                    equipo.map(item => (\r\n                        <li key={item.id}> {item.name} - {item.email} </li>\r\n                    ))\r\n                }\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nosotros;\r\n","\r\nimport './App.css';\r\nimport React from \"react\";\r\nimport \"antd/dist/antd.css\";\r\n\r\nfunction About() {\r\n  \r\n    return (\r\n   <div>\r\n       Quienes somos\r\n   </div>\r\n\r\n  );\r\n}\r\n\r\nexport default About;\r\n","\nimport repuestos from \"./repuestos\";\nimport Nosotros from \"./Nosotros\";\nimport About from \"./About\";\nimport './App.css';\nimport React from \"react\";\nimport \"antd/dist/antd.css\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport { Layout, Menu, Breadcrumb } from 'antd';\n\nconst { Header, Content, Footer } = Layout;\n\n\nfunction App() {\n  return (\n    <Router>\n    <Layout className=\"layout\">\n      <Header>\n\n        <div className=\"logo\" />\n        <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['1']}>\n\n          <div className=\"App\">\n            \n            <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['1']}>            \n              <Menu.Item key=\"1\"> <Link to=\"/\">Home</Link> </Menu.Item>\n              <Menu.Item key=\"2\"> <Link to=\"/About\">Quienes somos</Link> </Menu.Item>\n              <Menu.Item key=\"3\"> <Link to=\"/repuestos\">Repuestos</Link> </Menu.Item>            \n              <Menu.Item key=\"4\"> <Link to=\"/Nosotros\">Nosotros</Link> </Menu.Item>\n            </Menu>\n          </div>\n\n        </Menu>\n\n      </Header>\n\n      <Content style={{ padding: '0 50px' }}>\n        <Breadcrumb style={{ margin: '52px 0' }}>\n\n        </Breadcrumb>\n        <div className=\"site-layout-content\">\n          \n            <Switch>\n              <Route path=\"/\" exact component={Home}></Route>\n              <Route path=\"/About\" component={About}></Route>\n              <Route path=\"/repuestos\" component={repuestos}></Route>\n              <Route path=\"/Nosotros\" component={Nosotros}></Route>\n            </Switch>\n          \n        </div>\n      </Content>\n      <Footer style={{ textAlign: 'center' }}>Ant Design Â©2018 Created by Ant UED</Footer>\n    </Layout>\n    </Router>\n  );\n}\n\nconst Home = () => (<div>\n  Home\n</div>)\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}